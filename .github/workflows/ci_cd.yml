name: ci_cd
run-name: ${{ github.actor }} est√° probando GitHub Actions üöÄ

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=10
        ports:
          - "3306:3306" 
          
    steps:
      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Descargar el c√≥digo
        uses: actions/checkout@v3

      - name: Listar contenido del directorio db
        run: |
          echo "Listando contenido del directorio db:"
          ls -la $GITHUB_WORKSPACE/db
          
      - name: Ejecutar queries SQL
        run: |
          mysql -h127.0.0.1 -P3306 -u${{ secrets.MYSQL_ROOT_PASSWORD }} -p${{ secrets.MYSQL_ROOT_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} < $GITHUB_WORKSPACE/db/db.sql

      - name: Cachear paquetes de Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('server/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verificar la versi√≥n de Java
        run: java -version

      # Configurar variables de entorno ANTES de compilar con Maven
      - name: Configurar JWT_SECRET
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV

      - name: Configurar variables del Broker MQTT
        run: |
          echo "MQTT_BROKER=${{ secrets.MQTT_BROKER }}" >> $GITHUB_ENV
          echo "MQTT_CLIENT_ID=${{ secrets.MQTT_CLIENT_ID }}" >> $GITHUB_ENV
          echo "MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}" >> $GITHUB_ENV
          echo "MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}" >> $GITHUB_ENV

      - name: Configurar variables de entorno de InfluxDB
        run: |
          echo "INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}" >> $GITHUB_ENV
          echo "INFLUXDB_ORG=${{ secrets.INFLUXDB_ORG }}" >> $GITHUB_ENV
          echo "INFLUXDB_BUCKET=${{ secrets.INFLUXDB_BUCKET }}" >> $GITHUB_ENV
          echo "INFLUXDB_URL=${{ secrets.INFLUXDB_URL }}" >> $GITHUB_ENV
        
      - name: Configurar variables de entorno de Spring Boot
        run: |

          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> $GITHUB_ENV

      - name: Compilar con Maven
        run: |
          cd server
          mvn clean install

      - name: Ejecutar pruebas de Maven
        run: |
          cd server
          mvn test

      - name: Configurar Node.js para Angular
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependencias de Angular
        run: |
          cd frontend
          npm install
          npm install -g @angular/cli

      - name: Ejecutar pruebas de Angular
        run: |
          cd frontend
          # ng test --watch=false --browsers=ChromeHeadless

      - run: echo "üçè El estado de la tarea es ${{ job.status }}."
